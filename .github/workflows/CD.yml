name: CD

# main, develop 브랜치에 push 작업 요청시 작동
on:
  push:
    branches:
      - main
      - develop

permissions:
  contents: read

# 실행할 작업들
jobs:
  CD:
    runs-on: ubuntu-latest
    #build test를 위한 테스트 DB setting
    #현재는 별도의 DB를 두지 않고 서버 내부에서 Docker로 MySQL 실행.
    services:
      mysql:
        image: mysql
        env:
          MYSQL_DATABASE: jjanji
          MYSQL_ROOT_PASSWORD: 1234
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      #JDK setting
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      #dev, prod 환경에 맞는 .yml 생성
      # create application-dev.yml
      - name: make application-dev.yml
        if: contains(github.ref, 'develop') # branch가 develop인 경우
        run: |
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.PROPERTIES_DEV }}" > ./application-dev.yml
        shell: bash

      # create application-prod.yml
      #    - name: application-prod.yml
      #      if: contains(github.ref, 'main')  # branch가 main인 경우
      #      run: |
      #        cd ./src/main/resources
      #        touch ./application-prod.yml
      #        echo "${{ secrets.PROPERTIES_PROD }}" > ./application-prod.yml
      #      shell: bash

      # Gradle 권한 부여
      - name: Grant Execute permission for gradlew
        run: chmod +x gradlew
        shell: bash

      # develop, main branch Gradle build 진행
      - name: Develop Build With Gradle # develop branch test
        if: contains(github.ref, 'develop')
        run: SPRING_PROFILES_ACTIVE=[dev] ./gradlew clean build
        shell: bash

      #    - name: Main Build With Gradle # main branch test
      #      if: contains(github.ref, 'main')
      #      run: SPRING_PROFILES_ACTIVE=[prod] ./gradlew clean build
      #      shell: bash

      # docker build & push
      - name: Docker build & push to dev # 개발 서버용(develop) Docker build & push
        if: contains(github.ref, 'develop')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_REPO }}/zzanz-dev .
          docker push ${{ secrets.DOCKER_REPO }}/zzanz-dev

      #    - name: Docker build & push to prod # 운영 서버용(prod) Docker build & push
      #      run: |
      #        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      #        docker build -f Dokerfile-prod -t ${{ secrets.DOCKER_REPO }}/zzanz-prod .
      #        docker push ${{ secrets.DOCKER_REPO }}/zzanz-prod

      # SSH 접속 및 배포
      # deploy to develop
      - name: Deploy to Develop
        uses: appleboy/ssh-action@master
        id: deploy-dev
        if: contains(github.ref, 'develop')
        with:
          host: ${{ secrets.DEV_SERVER_IP }}
          username: ${{ secrets.DEV_SERVER_USER }}
          password: ${{ secrets.DEV_SERVER_PASSWORD }}
          port: ${{ secrets.DEV_SERVER_PORT }}
          script: |
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker rm -f $(docker ps -q -a)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/zzanz-dev
            docker-compose up -d
            docker image prune -f
            
            
      # deploy to prod
      #    - name: Deploy to prod
      #      uses: appleboy/ssh-action@master
      #      id: deploy-prod
      #      if: contains(github.ref, 'main')
      #      with:
      #        host: ${{ secrets.PROD_SERVER_IP }}
      #        username: ${{ secrets.PROD_SERVER_USER }}
      #        password: ${{ secrets.PROD_SERVER_PASSWORD }}
      #        port: ${{ secrets.PROD_SERVER_PORT }}
      #        script: |
      #          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      #          sudo docker rm -f $(docker ps -q -a)
      #          sudo docker pull ${{ secrets.DOCKER_REPO }}/zzanz-prod
      #          docker-compose up -d
      #          docker image prune -f
          
