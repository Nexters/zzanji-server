plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.nexters'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	asciidoctorExtensions
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	implementation 'com.google.firebase:firebase-admin:6.8.1'
	implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.2.2'
}

//변수 선언
ext {
	snippetsDir = file('build/generated-snippets')
}

//bootjar와 관련된 설정이며, 스니펫을 이용해 문서 작성후,
//build-docs-asciidoc 하위에 생기는 html 파일을 build/resources/main/static/docs 로 복사
bootJar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}") {
		into 'static/docs'
	}
}

//생성물이 snippertDir에 생성됨.
test {
	useJUnitPlatform()
	outputs.dir snippetsDir
}

asciidoctor {
	forkOptions {
		jvmArgs('--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED')
		jvmArgs('--add-opens', 'java.base/java.io=ALL-UNNAMED')
	}
	dependsOn test
	configurations 'asciidoctorExtensions'
	inputs.dir snippetsDir
	sources {
		include("**/index.adoc")
	}
	baseDirFollowsSourceDir()
}

//기존에 만들어진 adoc 삭제
asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}

clean {
	delete file('src/main/generated')
}


// QueryDSL 설정
def querydslSrcDir = 'src/main/generated'
clean {
	delete file(querydslSrcDir)
}
tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}